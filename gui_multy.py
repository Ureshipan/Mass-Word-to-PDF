
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
from tkinter import filedialog

from os import listdir
from os.path import isfile, join

import sys
import json
import subprocess
from tqdm.auto import tqdm


wdFormatPDF = 17
inf = ''
outf = ''
fine = []
errs = []


def macos(paths, keep_active):
    global fine, errs
    script = "convert.jxa"
    cmd = [
        "/usr/bin/osascript",
        "-l",
        "JavaScript",
        str(script),
        str(paths["input"]),
        str(paths["output"]),
        str(keep_active).lower(),
    ]

    def run(cmd):
        process = subprocess.Popen(cmd, stderr=subprocess.PIPE)
        while True:
            line = process.stderr.readline().rstrip()
            if not line:
                break
            yield line.decode("utf-8")

    total = len(list(Path(paths["input"]).glob("*.doc*"))) if paths["batch"] else 1
    for line in run(cmd):
        try:
            msg = json.loads(line)
        except ValueError:
            continue
        if msg["result"] == "success":
            fine.append(msg)
            if len(fine) > 18:
                fine.pop(0)
                fine[0] = '...........'
        elif msg["result"] == "error":
            errs.append(msg)
            if len(errs) > 18:
                errs.pop(0)
                errs[0] = '...........'
        canvas.itemconfig(udalos, text='\n'.join(fine))
        canvas.itemconfig(neudalos, text='\n'.join(errs))
        canvas.update_idletasks()


def resolve_paths(input_path, output_path):
    input_path = Path(input_path).resolve()
    output_path = Path(output_path).resolve() if output_path else None
    output = {}
    if input_path.is_dir():
        output["batch"] = True
        output["input"] = str(input_path)
        if output_path:
            assert output_path.is_dir()
        else:
            output_path = str(input_path)
        output["output"] = output_path
    else:
        output["batch"] = False
        assert str(input_path).endswith(".docx")
        output["input"] = str(input_path)
        if output_path and output_path.is_dir():
            output_path = str(output_path / (str(input_path.stem) + ".pdf"))
        elif output_path:
            assert str(output_path).endswith(".pdf")
        else:
            output_path = str(input_path.parent / (str(input_path.stem) + ".pdf"))
        output["output"] = output_path
    return output


def save_path(path, inout):
    if inout:
        file = open('inpath.txt', 'w')
    else:
        file = open('outpath.txt', 'w')
    file.write(path)
    file.close()


def load_path(inout):
    try:
        if inout:
            file = open('inpath.txt', 'r')
        else:
            file = open('outpath.txt', 'r')
        path = file.read()
        file.close()
        return path
    except:
        return ''


def choose_input_folder():
    global inf
    input_folder_path = filedialog.askdirectory(initialdir=load_path(True))
    if input_folder_path:
        inf = input_folder_path
        save_path(inf, True)
        canvas.itemconfig(input_folder_var, text=input_folder_path)
        #input_folder_var.set(input_folder_path)


def choose_output_folder():
    global outf
    output_folder_path = filedialog.askdirectory(initialdir=load_path(False))
    if output_folder_path:
        outf = output_folder_path
        save_path(outf, False)
        canvas.itemconfig(output_folder_var, text=output_folder_path)
        #output_folder_var.set(output_folder_path)


def convert():
    global inf, outf, errs, fine
    inf = inf.replace('/', '\\')
    outf = outf.replace('/', '\\')
    if inf != "" and outf != "":
        files = [f for f in listdir(inf) if isfile(join(inf, f)) and ('.doc' in f or '.docx' in f) and '~$' not in f]
        print(files)
        try:
            macos(resolve_paths(inf, outf), False)
        except Exception as e:
            print(e)
            canvas.itemconfig(udalos, text='\n'.join(fine))
            canvas.itemconfig(neudalos, text='\n'.join(errs))
            canvas.update_idletasks()


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()
window.title("Word to PDF")
window.geometry("526x568")
window.configure(bg = "#407177")


canvas = Canvas(
    window,
    bg = "#FFFFFF",
    height = 568,
    width = 526,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    263.0,
    284.0,
    image=image_image_1
)

image_image_2 = PhotoImage(
    file=relative_to_assets("image_2.png"))
image_2 = canvas.create_image(
    260.0,
    49.0,
    image=image_image_2
)

image_image_3 = PhotoImage(
    file=relative_to_assets("image_3.png"))
image_3 = canvas.create_image(
    260.0,
    170.0,
    image=image_image_3
)

image_image_4 = PhotoImage(
    file=relative_to_assets("image_4.png"))
image_4 = canvas.create_image(
    315.0,
    49.0,
    image=image_image_4
)

image_image_5 = PhotoImage(
    file=relative_to_assets("image_5.png"))
image_5 = canvas.create_image(
    315.0,
    170.0,
    image=image_image_5
)

image_image_6 = PhotoImage(
    file=relative_to_assets("image_6.png"))
image_6 = canvas.create_image(
    132.66702270507812,
    383.19622802734375,
    image=image_image_6
)

udalos = canvas.create_text(
    23.0,
    264.0,
    anchor="nw",
    text="Здесь отобразятся удачно\nконвертированные файлы",
    fill="#407077",
    font=("FiraSans Regular", 14 * -1)
)

image_image_7 = PhotoImage(
    file=relative_to_assets("image_7.png"))
image_7 = canvas.create_image(
    389.1275634765625,
    383.19622802734375,
    image=image_image_7
)

neudalos = canvas.create_text(
    285.0,
    265.0,
    anchor="nw",
    text="Здесь отобразятся неудачно\nконвертированные файлы",
    fill="#407077",
    font=("FiraSans Regular", 14 * -1)
)

input_folder_var = canvas.create_text(
    150.0,
    42.0,
    anchor="nw",
    text="Путь к папке с word файлами",
    fill="#407077",
    font=("FiraSans Regular", 14 * -1)
)

output_folder_var = canvas.create_text(
    150.0,
    163.0,
    anchor="nw",
    text="Путь к папке для pdf файлов",
    fill="#407077",
    font=("FiraSans Regular", 14 * -1)
)

button_image_1 = PhotoImage(
    file=relative_to_assets("button_1.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=choose_input_folder,
    relief="flat"
)
button_1.place(
    x=37.0,
    y=14.0,
    width=84.46919250488281,
    height=70.0
)

button_image_2 = PhotoImage(
    file=relative_to_assets("button_2.png"))
button_2 = Button(
    image=button_image_2,
    borderwidth=0,
    highlightthickness=0,
    command=choose_output_folder,
    relief="flat"
)
button_2.place(
    x=37.0,
    y=134.0,
    width=84.46919250488281,
    height=72.0
)

button_image_3 = PhotoImage(
    file=relative_to_assets("button_3.png"))
button_3 = Button(
    image=button_image_3,
    borderwidth=0,
    highlightthickness=0,
    command=convert,
    relief="flat"
)
button_3.place(
    x=37.53080749511719,
    y=92.701904296875,
    width=466.2918701171875,
    height=34.2943115234375
)
window.resizable(False, False)
window.mainloop()
